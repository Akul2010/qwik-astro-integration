{
  "resolvedId": "/home/jackshelton/dev/open-source/astro-qwik/node_modules/.pnpm/astro@3.1.0/node_modules/astro/dist/runtime/server/transition.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { fade, slide } from \"../../transitions/index.js\";\nimport { markHTMLString } from \"./escape.js\";\nconst transitionNameMap = /* @__PURE__ */ new WeakMap();\nfunction incrementTransitionNumber(result) {\n  let num = 1;\n  if (transitionNameMap.has(result)) {\n    num = transitionNameMap.get(result) + 1;\n  }\n  transitionNameMap.set(result, num);\n  return num;\n}\nfunction createTransitionScope(result, hash) {\n  const num = incrementTransitionNumber(result);\n  return `astro-${hash}-${num}`;\n}\nfunction toValidIdent(name) {\n  return name.replace(/[^a-zA-Z0-9\\-\\_]/g, \"_\").replace(/^\\_+|\\_+$/g, \"\");\n}\nconst getAnimations = (name) => {\n  if (name === \"fade\")\n    return fade();\n  if (name === \"slide\")\n    return slide();\n  if (typeof name === \"object\")\n    return name;\n};\nfunction renderTransition(result, hash, animationName, transitionName) {\n  if (!animationName)\n    animationName = \"fade\";\n  const scope = createTransitionScope(result, hash);\n  const name = transitionName ? toValidIdent(transitionName) : scope;\n  const sheet = new ViewTransitionStyleSheet(scope, name);\n  const animations = getAnimations(animationName);\n  if (animations) {\n    for (const [direction, images] of Object.entries(animations)) {\n      for (const [image, rules] of Object.entries(images)) {\n        sheet.addAnimationPair(direction, image, rules);\n      }\n    }\n  } else if (animationName === \"none\") {\n    sheet.addFallback(\"old\", \"animation: none; mix-blend-mode: normal;\");\n    sheet.addModern(\"old\", \"animation: none; opacity: 0; mix-blend-mode: normal;\");\n    sheet.addAnimationRaw(\"new\", \"animation: none; mix-blend-mode: normal;\");\n  }\n  result._metadata.extraHead.push(markHTMLString(`<style>${sheet.toString()}</style>`));\n  return scope;\n}\nclass ViewTransitionStyleSheet {\n  constructor(scope, name) {\n    this.scope = scope;\n    this.name = name;\n  }\n  modern = [];\n  fallback = [];\n  toString() {\n    const { scope, name } = this;\n    const [modern, fallback] = [this.modern, this.fallback].map((rules) => rules.join(\"\"));\n    return [\n      `[data-astro-transition-scope=\"${scope}\"] { view-transition-name: ${name}; }`,\n      this.layer(modern),\n      fallback\n    ].join(\"\");\n  }\n  layer(cssText) {\n    return cssText ? `@layer astro { ${cssText} }` : \"\";\n  }\n  addRule(target, cssText) {\n    this[target].push(cssText);\n  }\n  addAnimationRaw(image, animation) {\n    this.addModern(image, animation);\n    this.addFallback(image, animation);\n  }\n  addModern(image, animation) {\n    const { name } = this;\n    this.addRule(\"modern\", `::view-transition-${image}(${name}) { ${animation} }`);\n  }\n  addFallback(image, animation) {\n    const { scope } = this;\n    this.addRule(\n      \"fallback\",\n      // Two selectors here, the second in case there is an animation on the root.\n      `[data-astro-transition-fallback=\"${image}\"] [data-astro-transition-scope=\"${scope}\"],\n\t\t\t[data-astro-transition-fallback=\"${image}\"][data-astro-transition-scope=\"${scope}\"] { ${animation} }`\n    );\n  }\n  addAnimationPair(direction, image, rules) {\n    const { scope, name } = this;\n    const animation = stringifyAnimation(rules);\n    const prefix = direction === \"backwards\" ? `[data-astro-transition=back]` : \"\";\n    this.addRule(\"modern\", `${prefix}::view-transition-${image}(${name}) { ${animation} }`);\n    this.addRule(\n      \"fallback\",\n      `${prefix}[data-astro-transition-fallback=\"${image}\"] [data-astro-transition-scope=\"${scope}\"],\n\t\t\t${prefix}[data-astro-transition-fallback=\"${image}\"][data-astro-transition-scope=\"${scope}\"] { ${animation} }`\n    );\n  }\n}\nfunction addAnimationProperty(builder, prop, value) {\n  let arr = builder[prop];\n  if (Array.isArray(arr)) {\n    arr.push(value.toString());\n  } else {\n    builder[prop] = [value.toString()];\n  }\n}\nfunction animationBuilder() {\n  return {\n    toString() {\n      let out = \"\";\n      for (let k in this) {\n        let value = this[k];\n        if (Array.isArray(value)) {\n          out += `\n\t${k}: ${value.join(\", \")};`;\n        }\n      }\n      return out;\n    }\n  };\n}\nfunction stringifyAnimation(anim) {\n  if (Array.isArray(anim)) {\n    return stringifyAnimations(anim);\n  } else {\n    return stringifyAnimations([anim]);\n  }\n}\nfunction stringifyAnimations(anims) {\n  const builder = animationBuilder();\n  for (const anim of anims) {\n    if (anim.duration) {\n      addAnimationProperty(builder, \"animation-duration\", toTimeValue(anim.duration));\n    }\n    if (anim.easing) {\n      addAnimationProperty(builder, \"animation-timing-function\", anim.easing);\n    }\n    if (anim.direction) {\n      addAnimationProperty(builder, \"animation-direction\", anim.direction);\n    }\n    if (anim.delay) {\n      addAnimationProperty(builder, \"animation-delay\", anim.delay);\n    }\n    if (anim.fillMode) {\n      addAnimationProperty(builder, \"animation-fill-mode\", anim.fillMode);\n    }\n    addAnimationProperty(builder, \"animation-name\", anim.name);\n  }\n  return builder.toString();\n}\nfunction toTimeValue(num) {\n  return typeof num === \"number\" ? num + \"ms\" : num;\n}\nexport {\n  createTransitionScope,\n  renderTransition\n};\n",
      "start": 1695410711267,
      "end": 1695410711356,
      "sourcemaps": null
    },
    {
      "name": "astro:build",
      "start": 1695410711356,
      "end": 1695410711356,
      "order": "pre"
    },
    {
      "name": "astro:vite-plugin-env",
      "start": 1695410711356,
      "end": 1695410711356,
      "order": "pre"
    },
    {
      "name": "astro:jsx",
      "start": 1695410711356,
      "end": 1695410711356,
      "order": "pre"
    },
    {
      "name": "astro:content-asset-propagation",
      "start": 1695410711356,
      "end": 1695410711356,
      "order": "pre"
    },
    {
      "name": "vite-plugin-qwik",
      "start": 1695410711356,
      "end": 1695410711356,
      "order": "pre"
    },
    {
      "name": "vite-plugin-qwik",
      "start": 1695410711356,
      "end": 1695410711356,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1695410711356,
      "end": 1695410711357,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1695410711357,
      "end": 1695410711357,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1695410711357,
      "end": 1695410711357,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1695410711357,
      "end": 1695410711357,
      "order": "normal"
    },
    {
      "name": "astro:html",
      "start": 1695410711357,
      "end": 1695410711357,
      "order": "normal"
    },
    {
      "name": "astro:postprocess",
      "start": 1695410711357,
      "end": 1695410711357,
      "order": "normal"
    },
    {
      "name": "astro:head-metadata",
      "start": 1695410711357,
      "end": 1695410711357,
      "order": "normal"
    },
    {
      "name": "astro:content-imports",
      "start": 1695410711357,
      "end": 1695410711357,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1695410711357,
      "end": 1695410711357,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1695410711357,
      "end": 1695410711357,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1695410711357,
      "end": 1695410711357,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1695410711357,
      "end": 1695410711357,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1695410711357,
      "end": 1695410711358,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1695410711358,
      "end": 1695410711358,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1695410711358,
      "end": 1695410711358,
      "order": "normal"
    },
    {
      "name": "astro:scripts:page-ssr",
      "start": 1695410711358,
      "end": 1695410711358,
      "order": "post"
    },
    {
      "name": "astro:scanner",
      "start": 1695410711358,
      "end": 1695410711358,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1695410711358,
      "end": 1695410711358,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1695410711358,
      "end": 1695410711358,
      "order": "normal"
    }
  ]
}
