{
  "resolvedId": "/home/jackshelton/dev/open-source/astro-qwik/node_modules/.pnpm/astro@3.1.0/node_modules/astro/dist/runtime/server/render/astro/render.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { AstroError, AstroErrorData } from \"../../../../core/errors/index.js\";\nimport { chunkToByteArray, chunkToString, encoder } from \"../common.js\";\nimport { isHeadAndContent } from \"./head-and-content.js\";\nimport { isRenderTemplateResult } from \"./render-template.js\";\nasync function renderToString(result, componentFactory, props, children, isPage = false, route) {\n  const templateResult = await callComponentAsTemplateResultOrResponse(\n    result,\n    componentFactory,\n    props,\n    children,\n    route\n  );\n  if (templateResult instanceof Response)\n    return templateResult;\n  let str = \"\";\n  let renderedFirstPageChunk = false;\n  const destination = {\n    write(chunk) {\n      if (isPage && !renderedFirstPageChunk) {\n        renderedFirstPageChunk = true;\n        if (!/<!doctype html/i.test(String(chunk))) {\n          const doctype = result.compressHTML ? \"<!DOCTYPE html>\" : \"<!DOCTYPE html>\\n\";\n          str += doctype;\n        }\n      }\n      if (chunk instanceof Response)\n        return;\n      str += chunkToString(result, chunk);\n    }\n  };\n  await templateResult.render(destination);\n  return str;\n}\nasync function renderToReadableStream(result, componentFactory, props, children, isPage = false, route) {\n  const templateResult = await callComponentAsTemplateResultOrResponse(\n    result,\n    componentFactory,\n    props,\n    children,\n    route\n  );\n  if (templateResult instanceof Response)\n    return templateResult;\n  let renderedFirstPageChunk = false;\n  if (isPage) {\n    await bufferHeadContent(result);\n  }\n  return new ReadableStream({\n    start(controller) {\n      const destination = {\n        write(chunk) {\n          if (isPage && !renderedFirstPageChunk) {\n            renderedFirstPageChunk = true;\n            if (!/<!doctype html/i.test(String(chunk))) {\n              const doctype = result.compressHTML ? \"<!DOCTYPE html>\" : \"<!DOCTYPE html>\\n\";\n              controller.enqueue(encoder.encode(doctype));\n            }\n          }\n          if (chunk instanceof Response) {\n            throw new AstroError({\n              ...AstroErrorData.ResponseSentError\n            });\n          }\n          const bytes = chunkToByteArray(result, chunk);\n          controller.enqueue(bytes);\n        }\n      };\n      (async () => {\n        try {\n          await templateResult.render(destination);\n          controller.close();\n        } catch (e) {\n          if (AstroError.is(e) && !e.loc) {\n            e.setLocation({\n              file: route?.component\n            });\n          }\n          setTimeout(() => controller.error(e), 0);\n        }\n      })();\n    }\n  });\n}\nasync function callComponentAsTemplateResultOrResponse(result, componentFactory, props, children, route) {\n  const factoryResult = await componentFactory(result, props, children);\n  if (factoryResult instanceof Response) {\n    return factoryResult;\n  } else if (!isRenderTemplateResult(factoryResult)) {\n    throw new AstroError({\n      ...AstroErrorData.OnlyResponseCanBeReturned,\n      message: AstroErrorData.OnlyResponseCanBeReturned.message(route?.route, typeof factoryResult),\n      location: {\n        file: route?.component\n      }\n    });\n  }\n  return isHeadAndContent(factoryResult) ? factoryResult.content : factoryResult;\n}\nasync function bufferHeadContent(result) {\n  const iterator = result._metadata.propagators.values();\n  while (true) {\n    const { value, done } = iterator.next();\n    if (done) {\n      break;\n    }\n    const returnValue = await value.init(result);\n    if (isHeadAndContent(returnValue)) {\n      result._metadata.extraHead.push(returnValue.head);\n    }\n  }\n}\nexport {\n  renderToReadableStream,\n  renderToString\n};\n",
      "start": 1695410711401,
      "end": 1695410711533,
      "sourcemaps": null
    },
    {
      "name": "astro:build",
      "start": 1695410711533,
      "end": 1695410711533,
      "order": "pre"
    },
    {
      "name": "astro:vite-plugin-env",
      "start": 1695410711533,
      "end": 1695410711533,
      "order": "pre"
    },
    {
      "name": "astro:jsx",
      "start": 1695410711533,
      "end": 1695410711533,
      "order": "pre"
    },
    {
      "name": "astro:content-asset-propagation",
      "start": 1695410711533,
      "end": 1695410711533,
      "order": "pre"
    },
    {
      "name": "vite-plugin-qwik",
      "start": 1695410711533,
      "end": 1695410711533,
      "order": "pre"
    },
    {
      "name": "vite-plugin-qwik",
      "start": 1695410711533,
      "end": 1695410711533,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1695410711533,
      "end": 1695410711533,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1695410711533,
      "end": 1695410711533,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1695410711533,
      "end": 1695410711533,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1695410711533,
      "end": 1695410711533,
      "order": "normal"
    },
    {
      "name": "astro:html",
      "start": 1695410711533,
      "end": 1695410711533,
      "order": "normal"
    },
    {
      "name": "astro:postprocess",
      "start": 1695410711533,
      "end": 1695410711533,
      "order": "normal"
    },
    {
      "name": "astro:head-metadata",
      "start": 1695410711533,
      "end": 1695410711533,
      "order": "normal"
    },
    {
      "name": "astro:content-imports",
      "start": 1695410711533,
      "end": 1695410711533,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1695410711533,
      "end": 1695410711534,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1695410711534,
      "end": 1695410711534,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1695410711534,
      "end": 1695410711534,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1695410711534,
      "end": 1695410711534,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1695410711534,
      "end": 1695410711535,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1695410711535,
      "end": 1695410711535,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1695410711535,
      "end": 1695410711535,
      "order": "normal"
    },
    {
      "name": "astro:scripts:page-ssr",
      "start": 1695410711535,
      "end": 1695410711535,
      "order": "post"
    },
    {
      "name": "astro:scanner",
      "start": 1695410711535,
      "end": 1695410711535,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1695410711535,
      "end": 1695410711535,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1695410711535,
      "end": 1695410711535,
      "order": "normal"
    }
  ]
}
